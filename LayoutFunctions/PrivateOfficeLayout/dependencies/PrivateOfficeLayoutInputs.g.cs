// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Validators;
using Elements.Serialization.JSON;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Hypar.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace PrivateOfficeLayout
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public  class PrivateOfficeLayoutInputs : S3Args
    
    {
        [Newtonsoft.Json.JsonConstructor]
        
        public PrivateOfficeLayoutInputs(OfficeSizing @officeSizing, bool @createWalls, Overrides @overrides, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey):
        base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<PrivateOfficeLayoutInputs>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @officeSizing, @createWalls, @overrides});
            }
        
            this.OfficeSizing = @officeSizing;
            this.CreateWalls = @createWalls;
            this.Overrides = @overrides ?? this.Overrides;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Office Sizing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OfficeSizing OfficeSizing { get; set; }
    
        /// <summary>Should partitions be added around offices?</summary>
        [Newtonsoft.Json.JsonProperty("Create Walls", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CreateWalls { get; set; } = true;
    
        [Newtonsoft.Json.JsonProperty("overrides", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Overrides Overrides { get; set; } = new Overrides();
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class OfficeSizing 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public OfficeSizing(bool @automateOfficeSubdivisions, double @officeSize)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<OfficeSizing>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @automateOfficeSubdivisions, @officeSize});
            }
        
            this.AutomateOfficeSubdivisions = @automateOfficeSubdivisions;
            this.OfficeSize = @officeSize;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>Should offices be automatically created from provided zones?</summary>
        [Newtonsoft.Json.JsonProperty("Automate Office Subdivisions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AutomateOfficeSubdivisions { get; set; } = true;
    
        /// <summary>How large should the auto-generated offices be?</summary>
        [Newtonsoft.Json.JsonProperty("Office Size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(2.7432D, 10D)]
        public double OfficeSize { get; set; } = 5D;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class Overrides 
    
    {
        public Overrides() { }
        
        [Newtonsoft.Json.JsonConstructor]
        public Overrides(IList<FurnitureLocationsOverride> @furnitureLocations, IList<SpaceSettingsOverride> @spaceSettings)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<Overrides>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @furnitureLocations, @spaceSettings});
            }
        
            this.FurnitureLocations = @furnitureLocations ?? this.FurnitureLocations;
            this.SpaceSettings = @spaceSettings ?? this.SpaceSettings;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Furniture Locations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<FurnitureLocationsOverride> FurnitureLocations { get; set; } = new List<FurnitureLocationsOverride>();
    
        [Newtonsoft.Json.JsonProperty("Space Settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<SpaceSettingsOverride> SpaceSettings { get; set; } = new List<SpaceSettingsOverride>();
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class FurnitureLocationsOverride 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public FurnitureLocationsOverride(string @id, FurnitureLocationsIdentity @identity, FurnitureLocationsValue @value)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<FurnitureLocationsOverride>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity, @value});
            }
        
            this.Id = @id;
            this.Identity = @identity;
            this.Value = @value;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FurnitureLocationsIdentity Identity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FurnitureLocationsValue Value { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class SpaceSettingsOverride 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public SpaceSettingsOverride(string @id, SpaceSettingsIdentity @identity, SpaceSettingsValue @value)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<SpaceSettingsOverride>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity, @value});
            }
        
            this.Id = @id;
            this.Identity = @identity;
            this.Value = @value;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SpaceSettingsIdentity Identity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SpaceSettingsValue Value { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class FurnitureLocationsIdentity 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public FurnitureLocationsIdentity(Vector3 @originalLocation, string @gltfLocation)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<FurnitureLocationsIdentity>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @originalLocation, @gltfLocation});
            }
        
            this.OriginalLocation = @originalLocation;
            this.GltfLocation = @gltfLocation;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("OriginalLocation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vector3 OriginalLocation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gltfLocation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GltfLocation { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class FurnitureLocationsValue 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public FurnitureLocationsValue(Transform @transform)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<FurnitureLocationsValue>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @transform});
            }
        
            this.Transform = @transform;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Transform", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Transform Transform { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class SpaceSettingsIdentity 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public SpaceSettingsIdentity(Vector3 @parentCentroid)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<SpaceSettingsIdentity>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @parentCentroid});
            }
        
            this.ParentCentroid = @parentCentroid;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ParentCentroid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vector3 ParentCentroid { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class SpaceSettingsValue 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public SpaceSettingsValue(SpaceSettingsValueOfficeSizing @officeSizing, bool @createWalls, bool @primaryAxisFlipLayout, bool @secondaryAxisFlipLayout)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<SpaceSettingsValue>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @officeSizing, @createWalls, @primaryAxisFlipLayout, @secondaryAxisFlipLayout});
            }
        
            this.OfficeSizing = @officeSizing;
            this.CreateWalls = @createWalls;
            this.PrimaryAxisFlipLayout = @primaryAxisFlipLayout;
            this.SecondaryAxisFlipLayout = @secondaryAxisFlipLayout;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Office Sizing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SpaceSettingsValueOfficeSizing OfficeSizing { get; set; }
    
        /// <summary>Should partitions be added around offices?</summary>
        [Newtonsoft.Json.JsonProperty("Create Walls", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CreateWalls { get; set; } = true;
    
        [Newtonsoft.Json.JsonProperty("Primary Axis Flip Layout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PrimaryAxisFlipLayout { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("Secondary Axis Flip Layout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SecondaryAxisFlipLayout { get; set; } = false;
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class SpaceSettingsValueOfficeSizing 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public SpaceSettingsValueOfficeSizing(bool @automateOfficeSubdivisions, double @officeSize)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<SpaceSettingsValueOfficeSizing>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @automateOfficeSubdivisions, @officeSize});
            }
        
            this.AutomateOfficeSubdivisions = @automateOfficeSubdivisions;
            this.OfficeSize = @officeSize;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>Should offices be automatically created from provided zones?</summary>
        [Newtonsoft.Json.JsonProperty("Automate Office Subdivisions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AutomateOfficeSubdivisions { get; set; } = true;
    
        /// <summary>How large should the auto-generated offices be?</summary>
        [Newtonsoft.Json.JsonProperty("Office Size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(2.7432D, 10D)]
        public double OfficeSize { get; set; } = 5D;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }
}