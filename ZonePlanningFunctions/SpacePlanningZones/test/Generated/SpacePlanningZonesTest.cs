
// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar test generate'.
// DO NOT EDIT THIS FILE.

using Elements;
using Xunit;
using System.IO;
using System.Collections.Generic;
using Elements.Serialization.glTF;

namespace SpacePlanningZones
{
    public class SpacePlanningZonesTest
    {
        [Fact]
        public void TestExecute()
        {
            var input = GetInput();

            var modelDependencies = new Dictionary<string, Model> {
                {"Levels", Model.FromJson(File.ReadAllText(@"/Users/andrewheumann/Dev/HyparSpace/ZonePlanningFunctions/SpacePlanningZones/test/Generated/SpacePlanningZonesTest/model_dependencies/Levels/model.json")) },
                {"Program Requirements", Model.FromJson(File.ReadAllText(@"/Users/andrewheumann/Dev/HyparSpace/ZonePlanningFunctions/SpacePlanningZones/test/Generated/SpacePlanningZonesTest/model_dependencies/Program Requirements/model.json")) },
                {"Floors", Model.FromJson(File.ReadAllText(@"/Users/andrewheumann/Dev/HyparSpace/ZonePlanningFunctions/SpacePlanningZones/test/Generated/SpacePlanningZonesTest/model_dependencies/Floors/model.json")) },
                {"Core", Model.FromJson(File.ReadAllText(@"/Users/andrewheumann/Dev/HyparSpace/ZonePlanningFunctions/SpacePlanningZones/test/Generated/SpacePlanningZonesTest/model_dependencies/Core/model.json")) },
            };

            var result = SpacePlanningZones.Execute(modelDependencies, input);
            result.Model.ToGlTF("../../../Generated/SpacePlanningZonesTest/results/SpacePlanningZonesTest.glb");
            File.WriteAllText("../../../Generated/SpacePlanningZonesTest/results/SpacePlanningZonesTest.json", result.Model.ToJson());
        }

        public SpacePlanningZonesInputs GetInput()
        {
            var inputText = @"
            {
  ""Default Program Assignment"": ""Open Office"",
  ""Circulation Mode"": ""Manual"",
  ""Add Corridors"": {
    ""SplitLocations"": []
  },
  ""Depth at Ends"": 8,
  ""Split Zones"": {
    ""SplitLocations"": []
  },
  ""Corridor Width"": 1.5,
  ""Corridors"": [
    {
      ""width"": 1,
      ""leftWidth"": 1,
      ""flip"": true,
      ""polyline"": {
        ""Vertices"": [
          {
            ""X"": -29.44879421996542,
            ""Y"": -2.112098698847898,
            ""Z"": 0
          },
          {
            ""X"": -63.33322147508574,
            ""Y"": -2.0755043768892074,
            ""Z"": 0
          },
          {
            ""X"": -63.33327,
            ""Y"": 7.60158,
            ""Z"": 0
          },
          {
            ""X"": -50.99225523014507,
            ""Y"": 7.601641882966001,
            ""Z"": 0
          },
          {
            ""X"": -50.99227338117946,
            ""Y"": 11.22141316901595,
            ""Z"": 0
          },
          {
            ""X"": -37.79884986895761,
            ""Y"": 11.259494062706377,
            ""Z"": 0
          },
          {
            ""X"": -37.44387016440702,
            ""Y"": 7.538892994735187,
            ""Z"": 0
          },
          {
            ""X"": -22.893153131400076,
            ""Y"": 7.524495623111104,
            ""Z"": 0
          },
          {
            ""X"": -20.523222454538445,
            ""Y"": 4.507206154403624,
            ""Z"": 0
          },
          {
            ""X"": -29.448979828339514,
            ""Y"": -2.2839623408908976,
            ""Z"": 0
          }
        ],
        ""discriminator"": ""Elements.Geometry.Polyline""
      }
    }
  ],
  ""Outer Band Depth"": 6,
  ""Manual Split Locations"": [],
  ""model_input_keys"": {
    ""Levels"": ""e3dbf65e-47f5-4815-baea-cbfe329221ee_61dbb9f8-aaae-4295-9112-c8ae81655361_elements.zip"",
    ""Program Requirements"": ""2b2955b0-9d59-4c0f-9fb5-0fcc916381c9_9448d3bc-c7a0-4cee-9757-4752b8ba9958_elements.zip"",
    ""Floors"": ""f907a7bc-ec25-4743-83e7-cca3e45b6f28_31ec3b95-5062-47b9-a1e0-e3550bf7e2d1_elements.zip"",
    ""Core"": ""c35d43d9-c4cb-4925-9cbf-91f9ce8d9d20_a9cac5a1-f68d-4d2e-bfdd-0d204359bbe4_elements.zip""
  },
  ""Additional Corridor Locations"": []
}
            ";
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SpacePlanningZonesInputs>(inputText);
        }
    }
}